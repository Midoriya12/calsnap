
// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview This flow estimates the calorie count of a meal from an image,
 * identifies the dish, lists ingredients identified in the photo, and suggests a detailed recipe.
 *
 * - guessCaloriesFromImage - Estimates calories, identifies dish, ingredients, and generates a full recipe.
 * - GuessCaloriesFromImageInput - The input type for the guessCaloriesFromImage function.
 * - GuessCaloriesFromImageOutput - The return type for the guessCaloriesFromImage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GuessCaloriesFromImageInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      "A photo of a meal, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type GuessCaloriesFromImageInput = z.infer<
  typeof GuessCaloriesFromImageInputSchema
>;

const DetailedRecipeSchema = z.object({
  name: z.string().describe("The name of the recipe for the identified dish."),
  description: z.string().describe("A short, appealing description of the recipe (1-2 sentences)."),
  preparationTime: z.string().describe("Estimated preparation time for the recipe (e.g., '15 minutes')."),
  cookingTime: z.string().describe("Estimated cooking time for the recipe (e.g., '30 minutes')."),
  servings: z.string().describe("Number of servings the recipe makes (e.g., '2 servings', '4-6 servings')."),
  ingredientsList: z.array(z.string()).describe("A comprehensive list of ingredients required for the recipe, including quantities (e.g., '1 cup flour', '2 tbsp olive oil')."),
  instructionsList: z.array(z.string()).describe("Step-by-step cooking instructions for the recipe."),
});

const GuessCaloriesFromImageOutputSchema = z.object({
  dishName: z.string().describe('The name of the dish identified in the photo.'),
  identifiedIngredients: z.array(z.string()).describe('A list of primary ingredients *expected to be in the dish*, guided by the photo. This may include common, non-visible items if typical for the dish (e.g., cooking oil, basic spices).'),
  estimatedCalories: z
    .number()
    .describe('The estimated calorie count for a *typical single serving of the identified dish as depicted or implied by the photo*, considering common preparation methods and ingredients.'),
  generatedRecipe: DetailedRecipeSchema.describe("A detailed recipe generated for the identified dish, including ingredients, instructions, prep time, cooking time, and servings.")
});
export type GuessCaloriesFromImageOutput = z.infer<
  typeof GuessCaloriesFromImageOutputSchema
>;

export async function guessCaloriesFromImage(
  input: GuessCaloriesFromImageInput
): Promise<GuessCaloriesFromImageOutput> {
  return guessCaloriesFromImageFlow(input);
}

const guessCaloriesFromImagePrompt = ai.definePrompt({
  name: 'guessCaloriesFromImagePrompt',
  input: {schema: GuessCaloriesFromImageInputSchema},
  output: {schema: GuessCaloriesFromImageOutputSchema},
  prompt: `You are an expert nutritionist and chef. You will be provided with a photo of a meal.
Based on the photo:
1. Identify the name of the dish.
2. List the primary ingredients expected in this meal. While the photo is your main guide, you can infer common, non-visible ingredients (like cooking oil, salt, common spices for the cuisine) if they are almost certain to be part of preparing this specific dish. Focus on the main components.
3. Estimate the total calories for a *typical single serving of the identified dish as depicted or implied by the photo*. Base this on common preparation methods and a standard portion size for one person.
4. Generate a detailed recipe for the identified dish. This recipe should include:
    a. A recipe name (can be the same as the identified dish name or a more descriptive recipe title).
    b. A short, appealing description of the recipe (1-2 sentences).
    c. Estimated preparation time (e.g., '15 minutes').
    d. Estimated cooking time (e.g., '30 minutes').
    e. Number of servings the recipe makes (e.g., '2 servings', '4-6 servings').
    f. A comprehensive list of ingredients required for *making the recipe*, including quantities (e.g., '1 cup flour', '2 tbsp olive oil'). This list might differ from the ingredients merely identified in the photo.
    g. Step-by-step cooking instructions for the recipe.

Respond with a JSON object structured according to the output schema.
Photo: {{media url=photoDataUri}}`,
});

const guessCaloriesFromImageFlow = ai.defineFlow(
  {
    name: 'guessCaloriesFromImageFlow',
    inputSchema: GuessCaloriesFromImageInputSchema,
    outputSchema: GuessCaloriesFromImageOutputSchema,
  },
  async input => {
    const {output} = await guessCaloriesFromImagePrompt(input);
    return output!;
  }
);

    