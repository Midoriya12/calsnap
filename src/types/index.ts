
export interface Recipe {
  id: string; // Spoonacular's recipe ID
  name: string; // from title
  imageUrl: string; // from image
  cuisine: string; // Best effort from dishTypes or diets, or "General"
  ingredients: string[]; // Parsed from extendedIngredients (original string)
  instructions: string[]; // Parsed from analyzedInstructions
  dietaryRestrictions: string[]; // From diets, vegetarian, vegan, glutenFree, dairyFree flags
  calories?: number; // From nutrition.nutrients where name is "Calories"
  description?: string; // From summary (plain text version)
  preparationTime: string; // From readyInMinutes (total time)
  servings: number; // From servings
  viewCount?: number; // Not directly available, can use Spoonacular's score or likes as proxy if needed
  saveCount?: number; // Not directly available
  youtubeUrl?: string; // Not directly available from Spoonacular's recipe info endpoint
  sourceUrl?: string; // From sourceUrl or spoonacularSourceUrl
}

export interface DetailedRecipe {
  name: string;
  description: string;
  preparationTime: string;
  cookingTime: string; // Spoonacular provides 'readyInMinutes', might not split well.
  servings: string; // Will be number from Spoonacular, convert to string
  ingredientsList: string[];
  instructionsList: string[];
}

export interface AIEstimation {
  dishName: string;
  estimatedCalories: number;
  identifiedIngredients: string[];
  generatedRecipe: DetailedRecipe;
}

export interface IngredientNutritionInfo {
  ingredient: string;
  calories: number;
  protein: string;
  fat: string;
  carbs: string;
  source: string;
}

// SavedMeal type for Firestore
export interface SavedMeal {
  id: string; // Firestore document ID
  userId: string; // Firebase Auth User ID
  uploadedImagePreview: string; // Data URI of the uploaded image
  aiEstimation: AIEstimation;
  savedAt: string; // ISO string for the timestamp (consider using Firestore Timestamp type)
}

// Type for data being written to Firestore (id is auto-generated by Firestore)
export type NewSavedMealData = Omit<SavedMeal, 'id'>;

// LoggedMeal type for daily tracking
export interface LoggedMeal {
  id: string; // Firestore document ID
  userId: string; // Firebase Auth User ID
  dateLogged: string; // YYYY-MM-DD format
  mealName: string;
  calories: number;
  protein?: number; // in grams
  fat?: number; // in grams
  carbs?: number; // in grams
  fiber?: number; // in grams
  source: 'AI Estimation' | 'Manual Entry'; // To track how it was logged
  createdAt: string; // ISO string for the timestamp
}

export type NewLoggedMealData = Omit<LoggedMeal, 'id' | 'userId' | 'createdAt'>;

export interface DailyTotals {
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  fiber: number;
}

export interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: number;
}
