
export interface Recipe {
  id: string;
  name: string;
  imageUrl: string;
  cuisine: string; // From strArea or strCategory
  ingredients: string[]; // Parsed from strIngredientX and strMeasureX
  instructions: string[]; // Parsed from strInstructions
  dietaryRestrictions: string[]; // Parsed from strTags, or inferred if possible
  calories?: number; // Usually not available from TheMealDB
  description?: string; // Can be from strInstructions or a short summary
  preparationTime: string; // Typically "N/A" as not provided by TheMealDB
  servings: string; // Typically "N/A" or a default, as not provided by TheMealDB
  viewCount?: number; // Not available from TheMealDB
  saveCount?: number; // Not available from TheMealDB
  youtubeUrl?: string; // From strYoutube
  sourceUrl?: string; // From strSource
}

export interface DetailedRecipe {
  name: string;
  description: string;
  preparationTime: string;
  cookingTime: string;
  servings: string;
  ingredientsList: string[];
  instructionsList: string[];
}

export interface AIEstimation {
  dishName: string;
  estimatedCalories: number;
  identifiedIngredients: string[];
  generatedRecipe: DetailedRecipe;
}

export interface IngredientNutritionInfo {
  ingredient: string;
  calories: number;
  protein: string;
  fat: string;
  carbs: string;
  source: string;
}

// SavedMeal type for Firestore
export interface SavedMeal {
  id: string; // Firestore document ID
  userId: string; // Firebase Auth User ID
  uploadedImagePreview: string; // Data URI of the uploaded image
  aiEstimation: AIEstimation;
  savedAt: string; // ISO string for the timestamp (consider using Firestore Timestamp type)
}

// Type for data being written to Firestore (id is auto-generated by Firestore)
export type NewSavedMealData = Omit<SavedMeal, 'id'>;

// LoggedMeal type for daily tracking
export interface LoggedMeal {
  id: string; // Firestore document ID
  userId: string; // Firebase Auth User ID
  dateLogged: string; // YYYY-MM-DD format
  mealName: string;
  calories: number;
  protein?: number; // in grams
  fat?: number; // in grams
  carbs?: number; // in grams
  fiber?: number; // in grams
  source: 'AI Estimation' | 'Manual Entry'; // To track how it was logged
  createdAt: string; // ISO string for the timestamp
}

export type NewLoggedMealData = Omit<LoggedMeal, 'id' | 'userId' | 'createdAt'>;

export interface DailyTotals {
  calories: number;
  protein: number;
  fat: number;
  carbs: number;
  fiber: number;
}

export interface ChatMessage {
  id: string;
  text: string;
  sender: 'user' | 'bot';
  timestamp: number;
}
